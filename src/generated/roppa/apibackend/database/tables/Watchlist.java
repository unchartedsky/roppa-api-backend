/*
 * This file is generated by jOOQ.
 */
package roppa.apibackend.database.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import roppa.apibackend.database.Keys;
import roppa.apibackend.database.Roppa;
import roppa.apibackend.database.tables.records.WatchlistRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Watchlist extends TableImpl<WatchlistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>roppa.watchlist</code>
     */
    public static final Watchlist WATCHLIST = new Watchlist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WatchlistRecord> getRecordType() {
        return WatchlistRecord.class;
    }

    /**
     * The column <code>roppa.watchlist.company_name</code>.
     */
    public final TableField<WatchlistRecord, String> COMPANY_NAME = createField(DSL.name("company_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>roppa.watchlist.per</code>.
     */
    public final TableField<WatchlistRecord, Integer> PER = createField(DSL.name("per"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private Watchlist(Name alias, Table<WatchlistRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Watchlist(Name alias, Table<WatchlistRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>roppa.watchlist</code> table reference
     */
    public Watchlist(String alias) {
        this(DSL.name(alias), WATCHLIST);
    }

    /**
     * Create an aliased <code>roppa.watchlist</code> table reference
     */
    public Watchlist(Name alias) {
        this(alias, WATCHLIST);
    }

    /**
     * Create a <code>roppa.watchlist</code> table reference
     */
    public Watchlist() {
        this(DSL.name("watchlist"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Roppa.ROPPA;
    }

    @Override
    public UniqueKey<WatchlistRecord> getPrimaryKey() {
        return Keys.KEY_WATCHLIST_PRIMARY;
    }

    @Override
    public Watchlist as(String alias) {
        return new Watchlist(DSL.name(alias), this);
    }

    @Override
    public Watchlist as(Name alias) {
        return new Watchlist(alias, this);
    }

    @Override
    public Watchlist as(Table<?> alias) {
        return new Watchlist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Watchlist rename(String name) {
        return new Watchlist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Watchlist rename(Name name) {
        return new Watchlist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Watchlist rename(Table<?> name) {
        return new Watchlist(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Watchlist where(Condition condition) {
        return new Watchlist(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Watchlist where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Watchlist where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Watchlist where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Watchlist where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Watchlist where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Watchlist where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Watchlist where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Watchlist whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Watchlist whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
