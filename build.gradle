import org.springframework.boot.gradle.tasks.bundling.BootJar
import nu.studer.gradle.jooq.JooqEdition

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '10.1.1'
    id 'org.owasp.dependencycheck' version '12.1.3'
}

group = 'y1sh'
version = '0.1.0-SNAPSHOT'

base {
    archivesName = 'roppa-api-backend'
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
    withSourcesJar()
    withJavadocJar()
}

sourceSets.main.java.srcDirs = ['src/generated','src/main/java']

configurations {
    compileOnly { extendsFrom annotationProcessor }
    jooqGenerator   // classpath for jOOQ code generation
}

// --- Pin jOOQ version for both runtime and codegen (optional override) ---
// Comment this out to use the Spring Boot BOM-managed jOOQ version.
ext {
    jooqVersion = '3.20.5'
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Driver
    implementation 'org.mariadb.jdbc:mariadb-java-client'

    // If you use jOOQ DSL at runtime:
    implementation "org.jooq:jooq:${jooqVersion}"

    // Codegen + DB driver only for generator classpath:
    jooqGenerator "org.jooq:jooq-codegen:${jooqVersion}"
    jooqGenerator 'org.mariadb.jdbc:mariadb-java-client'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly    'org.junit.platform:junit-platform-launcher'
}

// JUnit platform and Virtual Threads in tests
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty "spring.threads.virtual.enabled", "true"
}

// Reproducible builds and strict encoding
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release  = 24
}

// Run with Virtual Threads enabled
bootRun {
    jvmArgs += ['-Dspring.threads.virtual.enabled=true']
}

// Layered bootJar for better Docker caching
tasks.named('bootJar', BootJar) {
    // Enable layered jar and keep defaults
    layered {
        enabled = true               // required: call with a closure
    }
}

jooq {
    // Keep plugin jOOQ version aligned â€” from ext or property if provided
    version = jooqVersion
    edition = JooqEdition.OSS  // the default (can be omitted)

    configurations {
        roppa {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = "org.mariadb.jdbc.Driver"
                    url = "jdbc:mariadb://127.0.0.1:3306/roppa"
                    user = "roppa"
                    password = "r0ppa!"
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mariadb.MariaDBDatabase'
                        inputSchema = 'roppa'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = "roppa.apibackend.database"
                        directory = "src/generated"
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}
